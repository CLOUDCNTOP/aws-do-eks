#!/bin/bash

# Source helper functions
source .fun

# Proxy settings [optional] - set if your network requires a proxy to connect to the Internet
export http_proxy=
export https_proxy=
export no_proxy=localhost

# AWS settings
## AWS_PROFILE - name of AWS settings profile AWS_PROFILE=default(default)|aws-do-eks|...
if [ -f ${HOME}/.aws/credentials ]; then
	export AWS_PROFILE=${AWS_PROFILE:-default}
fi
## AWS_REGION - will be set to AWS_DEFAULT_REGION if not set externally.
export AWS_DEFAULT_REGION=us-east-1
if [ "${AWS_REGION}" == "" ]; then
        export AWS_REGION=$AWS_DEFAULT_REGION
fi

# TO - Target Orchestrator, TO=docker|kubernetes(default)
## docker - choose when running locally or on ec2
## kubernetes - choose when running on a local, remote Kubernetes cluster or EKS
export TO=kubernetes

# Docker image settings
## REGISTRY: [optional] - Docker registry path including trailing "/". Example: registry.company.com/demo/
## If REGISTRY==default, then the default elastic container registry in the account for the current region will be used 
export REGISTRY=default
## Set default registry if needed
if [ "$REGISTRY" == "default" ]; then
    export REGION=${AWS_REGION}
    export ACCOUNT=$(aws sts get-caller-identity --query Account --output text)
    if [ "$ACCOUNT" == "" ]; then
        export REGISTRY=""
    else
        export REGISTRY=${ACCOUNT}.dkr.ecr.${REGION}.amazonaws.com/
    fi
fi
## Add trailing forward slash if needed
if [ -n "${REGISTRY}" ]; then
  if [ "${REGISTRY: -1}" != "/" ]; then
    export REGISTRY="${REGISTRY}/"
  fi
fi

## IMAGE: <required> - Docker image name for this project. Example: myapp
export IMAGE=do-gromacs
## VERSION: [optional] - Version tag for this Docker image. Example: v20180302
#export VERSION=v$(date +%Y%m%d)
export VERSION=v20220910
export TAG=$(if [ -z "${VERSION}" ]; then echo ""; else echo ":${VERSION}"; fi) 

## IMAGE Build Options
export SPACK_VERSION=v0.18.0
export BUILD_IMAGE=spack/amazon-linux:${SPACK_VERSION}
export SPACK_CACHE_VERSION=releases/v0.18
export SPACK_TARGET=x86_64_v3
export RUN_IMAGE="public.ecr.aws/amazonlinux/amazonlinux:latest"

## BUILD_OPTS: [optional] - arguments for the docker image build command
export BUILD_OPTS="--build-arg http_proxy=${http_proxy} --build-arg https_proxy=${https_proxy} --build-arg no_proxy=${no_proxy} --build-arg SPACK_VERSION=${SPACK_VERSION} --build-arg BUILD_IMAGE=${BUILD_IMAGE} --build-arg SPACK_CACHE_VERSION=${SPACK_CACHE_VERSION} --build-arg SPACK_TARGET=${SPACK_TARGET} --build-arg RUN_IMAGE=${RUN_IMAGE}"

# Docker TO settings
## CONTAINER_NAME: [optional] - Name of the Docker container including the --name switch. Example --name myapp
export CONTAINER=${IMAGE}
export CONTAINER_NAME="--name ${CONTAINER}"
## Port map [optional] - Mapping of external to internal ports including the -p switch. Example -p 80:8080 
export PORT_MAP="-p 80:8080"
## Volume map [optional] - Mapping of external to internal paths including the -v switch. Example $(pwd):/wd
export VOL_MAP="-v $(pwd):/wd"
## Network [optional] - Network name including the --net switch. Example --net mynet
export NETWORK=
## RUN_OPTS [optional] - additional options to specify with the run comman. Example -e POSTGRES_DB=dbname
export RUN_OPTS="-e http_proxy=$http_proxy -e https_proxy=$https_proxy -e no_proxy=$no_proxy -e AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION -e AWS_REGION=$AWS_REGION"
if [ -f ${HOME}/.aws/credentials ]; then
	export RUN_OPTS="$RUN_OPTS -e AWS_PROFILE=$AWS_PROFILE"
fi

# Kubernetes TO settings
export K8S_NAMESPACE=gromacs
export K8S_PVC_NAME=fsx-pvc
export K8S_PVC_SIZE=100Gi
